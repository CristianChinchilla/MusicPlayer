/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import javax.swing.table.DefaultTableModel;
import model.Song;
import controller.Playlist;
import java.awt.image.BufferedImage;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.*;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author José Daniel Segura Menjivar - C4J929
 * @author Cristian Chinchilla Fonseca - C4E360
 */
public class GUI extends javax.swing.JFrame {
    private static final String PLAYLIST_FILE = "playlist.txt";
    private static final String DEFAULT_PLAYLIST_FILE = "default_playlist.txt";
    private ImageIcon playIcon;
    private ImageIcon pauseIcon;
    private int currentSongIndex = -1;
    private Timer progressTimer;
    private boolean autoPlay = true;

    Playlist playlist = new Playlist();
    MusicPlayer player = new MusicPlayer();

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        loadIcons();
        updateTable();

        songProgressBar.setStringPainted(true);
        songProgressBar.setValue(0);
        songProgressBar.setString("00:00 / 00:00");

        progressTimer = new Timer(100, e -> {
            updateProgressBar();
        });

        playButton.setToolTipText("Reproducir");
        stopButton.setToolTipText("Detener");
        nextButton.setToolTipText("Siguiente");
        backButton.setToolTipText("Anterior");

        addButton.setToolTipText("Añadir canción");
        deleteButton.setToolTipText("Borrar canción");
        saveButton.setToolTipText("Guardar lista");
        loadButton.setToolTipText("Cargar lista");

        player.setOnSongFinished(() -> {
            if (autoPlay) {
                SwingUtilities.invokeLater(this::nextSong);
            } else {
                SwingUtilities.invokeLater(() -> {
                    playButton.setIcon(playIcon);
                    playButton.setToolTipText("Reproducir");
                    progressTimer.stop();
                    songProgressBar.setValue(100);
                    songProgressBar.setString(
                            formatTime(player.getTotalLength()) + " / " + formatTime(player.getTotalLength()));
                });
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        playButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        songProgressBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        songTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        songCover = new javax.swing.JLabel();
        autoplayButton = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setBackground(new java.awt.Color(204, 255, 255));

        playButton.setBackground(new java.awt.Color(0, 204, 102));
        playButton.setForeground(new java.awt.Color(0, 0, 0));
        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/playIcon.png"))); // NOI18N
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        nextButton.setBackground(new java.awt.Color(0, 204, 102));
        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/nextIcon.png"))); // NOI18N
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        backButton.setBackground(new java.awt.Color(0, 204, 102));
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/backIcon.png"))); // NOI18N
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        songTable.setBackground(new java.awt.Color(255, 255, 255));
        songTable.setForeground(new java.awt.Color(255, 153, 153));
        songTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null }
                },
                new String[] {
                        "Titulo", "Artista", "Duración", "Ruta"
                }) {
            boolean[] canEdit = new boolean[] {
                    true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jScrollPane1.setViewportView(songTable);

        addButton.setBackground(new java.awt.Color(0, 204, 102));
        addButton.setForeground(new java.awt.Color(0, 0, 0));
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/addIcon.png"))); // NOI18N
        addButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        addButton.setIconTextGap(8);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(0, 204, 102));
        deleteButton.setForeground(new java.awt.Color(0, 0, 0));
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/deleteIcon.png"))); // NOI18N
        deleteButton.setIconTextGap(8);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        saveButton.setBackground(new java.awt.Color(0, 204, 102));
        saveButton.setForeground(new java.awt.Color(0, 0, 0));
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/saveIcon.png"))); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        loadButton.setBackground(new java.awt.Color(0, 204, 102));
        loadButton.setForeground(new java.awt.Color(0, 0, 0));
        loadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/loadIcon.png"))); // NOI18N
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        stopButton.setBackground(new java.awt.Color(0, 204, 102));
        stopButton.setForeground(new java.awt.Color(0, 0, 0));
        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/stopIcon.png"))); // NOI18N
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        songCover.setBackground(new java.awt.Color(255, 255, 255));
        songCover.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        songCover.setForeground(new java.awt.Color(0, 0, 0));
        songCover.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        songCover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/musicIcon.png"))); // NOI18N
        songCover.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        autoplayButton.setBackground(new java.awt.Color(0, 204, 102));
        autoplayButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/autoplayIcon.png"))); // NOI18N
        autoplayButton.setSelected(true);
        autoplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoplayButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
                mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addComponent(backButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(playButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(stopButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(nextButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(autoplayButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        160, Short.MAX_VALUE)
                                                .addComponent(addButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(deleteButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(saveButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(loadButton))
                                        .addComponent(songProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(songCover, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 590,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap()));
        mainPanelLayout.setVerticalGroup(
                mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addComponent(songCover, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(mainPanelLayout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(mainPanelLayout
                                                                .createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.LEADING,
                                                                        false)
                                                                .addComponent(playButton,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE)
                                                                .addComponent(stopButton,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE)
                                                                .addComponent(nextButton,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE)
                                                                .addComponent(backButton,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE)
                                                                .addComponent(loadButton,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE)
                                                                .addComponent(saveButton,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE)
                                                                .addComponent(deleteButton,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE)
                                                                .addComponent(addButton,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE))
                                                        .addComponent(autoplayButton))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(songProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 571,
                                                Short.MAX_VALUE))
                                .addContainerGap()));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_playButtonActionPerformed
        playButton.setEnabled(false);
        try {
            int selectedRow = songTable.getSelectedRow();

            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(this, "Seleccione una canción primero.", "Error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            currentSongIndex = selectedRow;
            String filePath = (String) songTable.getValueAt(selectedRow, 3);
            File songFile = new File(filePath);

            switch (player.getState()) {
                case STOPPED:
                    player.play(songFile);
                    playButton.setIcon(pauseIcon);
                    progressTimer.start();
                    break;

                case PLAYING:
                    player.pause();
                    playButton.setIcon(playIcon);
                    progressTimer.stop();
                    break;

                case PAUSED:
                    if (songFile.equals(player.getCurrentFile())) {
                        player.resume();
                        playButton.setIcon(pauseIcon);
                        progressTimer.start();
                    } else {
                        player.play(songFile);
                        playButton.setIcon(pauseIcon);
                        progressTimer.start();
                    }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            player.stop();
            playButton.setIcon(playIcon);
        } finally {
            playButton.setEnabled(true);
        }

    }// GEN-LAST:event_playButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_nextButtonActionPerformed
        nextSong();

    }// GEN-LAST:event_nextButtonActionPerformed

    private void nextSong() {
        if (playlist.getSongs().isEmpty()) {
            return;
        }

        currentSongIndex++;
        if (currentSongIndex >= playlist.getSongs().size()) {
            currentSongIndex = 0; // Volver al inicio.
        }

        songTable.setRowSelectionInterval(currentSongIndex, currentSongIndex);
        songProgressBar.setValue(0);
        playSelectedSong();
    }

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Selecciones canciones");
        fileChooser.setMultiSelectionEnabled(true);

        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivo de audio", "mp3", "wav", "acc"));

        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File[] selectedFiles = fileChooser.getSelectedFiles();

            for (File file : selectedFiles) {
                try {
                    playlist.addSong(file);
                } catch (UnsupportedAudioFileException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            updateTable();
        }
    }// GEN-LAST:event_addButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_stopButtonActionPerformed
        player.stop();
        playButton.setIcon(playIcon);
        progressTimer.stop();
        songProgressBar.setValue(0);
        songProgressBar.setString("00:00 / " + formatTime(player.getTotalLength()));
    }// GEN-LAST:event_stopButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_backButtonActionPerformed
        previousSong();
    }// GEN-LAST:event_backButtonActionPerformed

    private void previousSong() {
        if (playlist.getSongs().isEmpty()) {
            return;
        }

        currentSongIndex--;
        if (currentSongIndex < 0) {
            currentSongIndex = playlist.getSongs().size() - 1; // Ir al final.
        }

        songTable.setRowSelectionInterval(currentSongIndex, currentSongIndex);
        songProgressBar.setValue(0);
        playSelectedSong();
    }

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteButtonActionPerformed
        int selectedRow = songTable.getSelectedRow();

        if (selectedRow >= 0) {
            int confirm = JOptionPane.showConfirmDialog(
                    this,
                    "¿Está seguro de que desea eliminar esta canción?",
                    "Confirmar eliminación",
                    JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                // Si se está reproduciendo la canción que se va a eliminar.
                if (selectedRow == currentSongIndex) {
                    player.stop();
                    playButton.setIcon(playIcon);
                    playButton.setToolTipText("Reproducir");
                    progressTimer.stop();
                    songProgressBar.setValue(0);
                    songProgressBar.setString("00:00 / " + formatTime(player.getTotalLength()));
                    currentSongIndex = -1;
                }

                playlist.removeSong(selectedRow);
                if (selectedRow == currentSongIndex) {
                    currentSongIndex = -1;
                } else if (selectedRow < currentSongIndex) {
                    currentSongIndex--;

                }
                if (playlist.getSongs().isEmpty()) {
                    currentSongIndex = -1;
                    player.stop();
                    playButton.setIcon(playIcon);
                    progressTimer.stop();
                    songProgressBar.setValue(0);
                }

                updateTable();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione una canción para eliminar.", "Error",
                    JOptionPane.WARNING_MESSAGE);
        }
    }// GEN-LAST:event_deleteButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveButtonActionPerformed
        try {
            // Crear archivo para guardar la playlist
            File file = new File(PLAYLIST_FILE);
            BufferedWriter writer = new BufferedWriter(new FileWriter(file));

            // Escribir cada canción en el archivo.
            for (Song song : playlist.getSongs()) {
                // Formato: título|artista|duración|ruta_archivo.
                String line = song.getTitle() + "|" +
                        song.getArtist() + "|" +
                        song.getFormattedLength() + "|" +
                        song.getFile().getAbsolutePath();
                writer.write(line);
                writer.newLine();
            }

            writer.close();

            // Mostrar mensaje de exito.
            JOptionPane.showMessageDialog(
                    this,
                    "Lista de reproducción guardada exitosamente.",
                    "Guardar",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(
                    this,
                    "Error al guardar la lista: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }

    }// GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_loadButtonActionPerformed
        try {
            // Intentar cargar primero el archivo de playlist guardado.
            File file = new File(PLAYLIST_FILE);

            // Si no existe el archivo guardado, crear una playlist por defecto.
            if (!file.exists()) {
                createDefaultPlaylist();
                file = new File(DEFAULT_PLAYLIST_FILE);
            }

            // Si aún no existe ningún archivo, mostrar mensaje.
            if (!file.exists()) {
                JOptionPane.showMessageDialog(
                        this,
                        "No se encontró ninguna lista de reproducción para cargar.",
                        "Información",
                        JOptionPane.INFORMATION_MESSAGE);
                return;
            }

           
            currentSongIndex = -1;
            player.stop();
            playButton.setIcon(playIcon);
            progressTimer.stop();
            songProgressBar.setValue(0);

            BufferedReader reader = new BufferedReader(new FileReader(file));
            String line;
            int loadedSongs = 0;
            int errorCount = 0;

            while ((line = reader.readLine()) != null) {
                try {
                    String[] parts = line.split("\\|");
                    if (parts.length >= 4) {
                        String filePath = parts[3];
                        File songFile = new File(filePath);
                        if (songFile.exists()) {
                            playlist.addSong(songFile);
                            loadedSongs++;
                        } else {
                            errorCount++;
                            System.err.println("Archivo no encontrado: " + filePath);
                        }
                    }
                } catch (Exception e) {
                    errorCount++;
                    System.err.println("Error procesando línea: " + line);
                }
            }

            reader.close();
            updateTable();
            String message = "Lista cargada exitosamente.\n" +
                    "Canciones cargadas: " + loadedSongs;

            if (errorCount > 0) {
                message += "\nArchivos no encontrados: " + errorCount;
            }

            JOptionPane.showMessageDialog(
                    this,
                    message,
                    "Cargar",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(
                    this,
                    "Error al cargar la lista: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }// GEN-LAST:event_loadButtonActionPerformed

    private void createDefaultPlaylist() {
        try {
            File file = new File(PLAYLIST_FILE);
            BufferedWriter writer = new BufferedWriter(new FileWriter(file));

            String[] defaultSongs = {
                    "De vez en cuando|NSQK|03:00|C:\\Users\\Usuario\\Music\\De-Vez-en-Cuando-_Aparece_.wav",
                    "We are the people|NSQK|4:27|C:\\Users\\Usuario\\Music\\We-Are-The-People.wav"
            };

            for (String song : defaultSongs) {
                writer.write(song);
                writer.newLine();
            }

            writer.close();

        } catch (IOException e) {
            System.err.println("Error creando playlist por defecto: " + e.getMessage());
        }
    }

    private void autoplayButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_autoplayButtonActionPerformed
        autoPlay = autoplayButton.isSelected();
    }// GEN-LAST:event_autoplayButtonActionPerformed

    private void playSelectedSong() {
        if (currentSongIndex >= 0 && currentSongIndex < playlist.getSongs().size()) {
            String filePath = (String) songTable.getValueAt(currentSongIndex, 3);
            File songFile = new File(filePath);

            try {
                player.play(songFile);
                playButton.setIcon(pauseIcon);
                playButton.setToolTipText("Pausar");
                songProgressBar.setValue(0);
                songProgressBar.setString("00:00 / " + formatTime(player.getTotalLength()));
                progressTimer.restart();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                player.stop();
                playButton.setIcon(playIcon);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JToggleButton autoplayButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton playButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel songCover;
    private javax.swing.JProgressBar songProgressBar;
    private javax.swing.JTable songTable;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables

    private void updateTable() {
        DefaultTableModel model = (DefaultTableModel) songTable.getModel();
        model.setRowCount(0);

        for (Song song : playlist.getSongs()) {
            model.addRow(new Object[] {
                    song.getTitle(),
                    song.getArtist(),
                    song.getFormattedLength(),
                    song.getFile().getAbsolutePath()
            });
        }
    }

    private void loadIcons() {
        try {
            BufferedImage playImage = ImageIO.read(getClass().getResource("/playIcon.png"));
            BufferedImage pauseImage = ImageIO.read(getClass().getResource("/pauseIcon.png"));

            playIcon = new ImageIcon(playImage.getScaledInstance(32, 32, BufferedImage.SCALE_SMOOTH));
            pauseIcon = new ImageIcon(pauseImage.getScaledInstance(32, 32, BufferedImage.SCALE_SMOOTH));

            playButton.setIcon(playIcon);
            playButton.setText("");

        } catch (Exception e) {
            System.err.println("Error cargando iconos: " + e.getMessage());
            playButton.setText("Play");
        }
    }

    private void updateProgressBar() {
        if (player.isPlaying() && currentSongIndex >= 0) {
            long currentPosition = player.getCurrentPosition();
            long totalLength = player.getTotalLength();

            if (totalLength > 0) {
                int progress = (int) ((currentPosition * 100) / totalLength);
                songProgressBar.setValue(progress);

                String currentTime = formatTime(currentPosition);
                String totalTime = formatTime(totalLength);

                songProgressBar.setToolTipText(currentTime + " / " + totalTime);
                songProgressBar.setString(currentTime + " / " + totalTime);

                songProgressBar.repaint();
            }
        }
    }

    private String formatTime(long microseconds) {
        long seconds = microseconds / 1_000_000;
        long minutes = seconds / 60;
        seconds = seconds % 60;
        return String.format("%02d:%02d", minutes, seconds);
    }

}
